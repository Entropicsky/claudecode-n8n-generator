{
  "name": "Company News Newsletter Enhanced v7.3.1",
  "nodes": [
    {
      "parameters": {
        "content": "## Company News Newsletter Enhanced Workflow v7.3.1\n\n### What's Fixed in v7.3.1:\n- Fixed node connection issue with Read Email Recipients\n- Proper sequential flow for email generation\n\n### What's New in v7.3:\n- Improved formatting with bullet points\n- Executive Summary uses structured bullets\n- Company research outputs bullet points\n- Cleaner, more scannable email format\n\n### What's New in v7.2:\n- Email recipients pulled from Recipients sheet\n- No more hardcoded email addresses\n\n### Features:\n1. **Automatic Database Creation**:\n   - Creates new Research Database for each run\n   - Named with date and week number\n\n2. **Individual Company Research**:\n   - Quality research with bullet points\n   - Scales to 100+ companies\n\n3. **Dynamic Email Recipients**:\n   - Pulls from Recipients sheet\n   - Supports multiple recipients\n\n4. **Professional Email Format**:\n   - Executive summary with bullets\n   - HTML table overview\n   - Detailed reports with bullets\n   - Google Sheets link attachment",
        "height": 441.67502497041396,
        "width": 396.96078431372515
      },
      "id": "29c0a0e5-bd35-4d9c-90cc-f36c9c0b5c9a",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -400,
        -300
      ]
    },
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -80,
        40
      ]
    },
    {
      "parameters": {
        "resource": "spreadsheet",
        "title": "=Company News Database - {{ DateTime.local().toFormat('yyyy-MM-dd') }} - Week {{ DateTime.local().toFormat('kkkk-WW') }}",
        "sheetsUi": {
          "sheetValues": [
            {
              "title": "Research"
            },
            {
              "title": "Weekly Summary"
            }
          ]
        },
        "options": {}
      },
      "id": "create-research-database",
      "name": "Create Research Database",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        140,
        40
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "srnrFBhxce3hn8Co",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Create header row for Research sheet - headers must be in first row\nreturn [{\n  json: {\n    Company: 'Company',\n    Summary: 'Summary',\n    Links: 'Links',\n    WeekNumber: 'WeekNumber',\n    ISOWeek: 'ISOWeek',\n    ResearchDate: 'ResearchDate',\n    EmailSent: 'EmailSent'\n  }\n}];"
      },
      "id": "prepare-headers",
      "name": "Prepare Headers",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        360,
        40
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $('Create Research Database').first().json.spreadsheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Research",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": []
        },
        "options": {}
      },
      "id": "setup-research-headers",
      "name": "Setup Research Headers",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        580,
        40
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "srnrFBhxce3hn8Co",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1LnQfeGcO80OMRpUJ0fmPaO6Fxeb45N58oh0Qlcz65j4",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "List",
          "mode": "name"
        },
        "options": {}
      },
      "id": "read-company-list",
      "name": "Read Company List",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        800,
        40
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "srnrFBhxce3hn8Co",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const companies = $input.all()\n  .map(item => item.json.company || item.json.Company) // Handle both cases\n  .filter(company => company && company.trim() !== '');\n\nconst currentWeek = DateTime.local().toFormat('kkkk-WW');\nconst weekNumber = DateTime.local().weekNumber;\n\nreturn companies.map((company, index) => ({\n  json: {\n    company: company,\n    currentWeek: currentWeek,\n    weekNumber: weekNumber,\n    timestamp: new Date().toISOString(),\n    itemIndex: index,\n    researchPrompt: `Research news for ${company} from the last 7 days ONLY. Focus on financial results, product launches, partnerships, leadership changes, regulatory developments, and significant announcements. Provide a comprehensive summary with specific dates and quantifiable impacts where available. If no significant news is found for the past week, note this briefly.`\n  }\n}));"
      },
      "id": "prepare-companies",
      "name": "Prepare Companies for Research",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        40
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Store company data in workflow static data before AI Agent\nconst staticData = $getWorkflowStaticData('global');\nconst company = $input.item.json.company;\nconst itemIndex = $input.item.json.itemIndex;\n\n// Store company info with unique key\nstaticData[`company_${itemIndex}`] = {\n  company: company,\n  currentWeek: $input.item.json.currentWeek,\n  weekNumber: $input.item.json.weekNumber,\n  timestamp: $input.item.json.timestamp\n};\n\n// Also store for retrieval by position\nif (!staticData.companyList) {\n  staticData.companyList = [];\n}\nstaticData.companyList[itemIndex] = company;\n\n// Return the data for the AI Agent\nreturn {\n  json: {\n    company: company,\n    researchPrompt: $input.item.json.researchPrompt,\n    currentWeek: $input.item.json.currentWeek,\n    weekNumber: $input.item.json.weekNumber,\n    timestamp: $input.item.json.timestamp,\n    itemIndex: itemIndex\n  }\n};"
      },
      "id": "store-company-data",
      "name": "Store Company Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        40
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.researchPrompt }}",
        "options": {
          "systemMessage": "You are an expert business researcher specializing in company news analysis. Your task is to research and summarize recent news for a specific company.\n\nGuidelines:\n1. Use the Perplexity Research tool to find news from the LAST 7 DAYS ONLY\n2. Focus on: financial results, product launches, partnerships, leadership changes, regulatory developments, and significant announcements\n3. Include specific dates for all news items\n4. Quantify impacts where possible (revenue, percentage changes, etc.)\n5. If no significant news is found for the past week, state this clearly\n6. Provide links to sources when available\n\nOUTPUT FORMAT - USE BULLET POINTS:\n\n**Overview:** (1-2 sentences max)\n\n**Key Developments:**\n• [Date] - Development 1 with specific details\n• [Date] - Development 2 with metrics/impact\n• [Date] - Development 3 with outcome\n\n**Financial/Business Impact:**\n• Metric 1: Specific number or percentage\n• Metric 2: Quantified impact\n\n**Sources:**\n• Link 1\n• Link 2\n\nIMPORTANT: Use bullet points (•) for clarity. Keep each bullet concise and factual.",
          "maxIterations": 10,
          "returnIntermediateSteps": false
        }
      },
      "id": "research-agent",
      "name": "Company Research Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1460,
        40
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list"
        },
        "options": {
          "maxTokens": 2000,
          "temperature": 0.3
        }
      },
      "id": "research-llm",
      "name": "Research LLM",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1400,
        260
      ],
      "credentials": {
        "openAiApi": {
          "id": "PS440yU5f7mAuNzs",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": "sonar-pro",
        "messages": {
          "message": [
            {
              "content": "={{ $fromAI('query') }}"
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "id": "perplexity-tool",
      "name": "Perplexity Research Tool",
      "type": "n8n-nodes-base.perplexityTool",
      "typeVersion": 1,
      "position": [
        1680,
        260
      ],
      "credentials": {
        "perplexityApi": {
          "id": "hEV6mKgaLHyww78g",
          "name": "Perplexity account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Retrieve company data from workflow static data\nconst staticData = $getWorkflowStaticData('global');\nconst itemIndex = $input.item.json.input?.itemIndex ?? $itemIndex;\n\n// Get stored company info\nconst companyData = staticData[`company_${itemIndex}`] || {};\nconst company = companyData.company || staticData.companyList?.[itemIndex] || 'Unknown Company';\n\n// Get the AI output\nconst summary = $input.item.json.output || 'No research output';\n\n// Extract links from the summary (basic regex)\nconst linkMatches = summary.match(/https?:\\/\\/[^\\s]+/g) || [];\nconst links = linkMatches.join('\\n');\n\n// Return the formatted data\nreturn {\n  json: {\n    Company: company,\n    Summary: summary,\n    Links: links,\n    WeekNumber: String(companyData.weekNumber || DateTime.local().weekNumber),\n    ISOWeek: companyData.currentWeek || DateTime.local().toFormat('kkkk-WW'),\n    ResearchDate: companyData.timestamp || new Date().toISOString(),\n    EmailSent: 'false'\n  }\n};"
      },
      "id": "format-research",
      "name": "Format Research Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        40
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $('Create Research Database').first().json.spreadsheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Research",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": []
        },
        "options": {
          "cellFormat": "USER_ENTERED"
        }
      },
      "id": "store-research",
      "name": "Store in Research Database",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        1900,
        40
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "srnrFBhxce3hn8Co",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Check if all companies have been processed\nconst allProcessed = $items().every(item => item.json.EmailSent !== undefined);\n\nif (allProcessed) {\n  return {\n    json: {\n      triggerCompilation: true,\n      message: \"All companies researched, triggering weekly compilation\"\n    }\n  };\n}\n\nreturn {\n  json: {\n    triggerCompilation: false,\n    message: \"Research still in progress\"\n  }\n};"
      },
      "id": "check-completion",
      "name": "Check Research Completion",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2120,
        40
      ]
    },
    {
      "parameters": {
        "content": "## Weekly Compilation Process\n\nThis section runs after all companies have been researched. It:\n1. Reads summaries from the newly created database\n2. Creates executive summary with bullet points\n3. Populates Weekly Summary sheet\n4. Reads email recipients from Recipients sheet\n5. Formats and sends email to all recipients",
        "height": 275.25490196078424,
        "width": 258.8235294117646
      },
      "id": "compilation-note",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -80,
        400
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "={{ $('Create Research Database').first().json.spreadsheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Research",
          "mode": "name"
        },
        "options": {}
      },
      "id": "read-week-summaries",
      "name": "Read Current Week Summaries",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        140,
        600
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "srnrFBhxce3hn8Co",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Since we have a fresh database for each run, no need to filter by week\nconst allItems = $input.all();\n// Filter out the header row and any empty rows\nconst weekSummaries = allItems.filter(item => \n  item.json.Company && \n  item.json.Company !== 'Company' && // Skip header row\n  item.json.Summary && \n  item.json.Summary !== 'Summary' // Skip header row\n);\n\nif (weekSummaries.length === 0) {\n  throw new Error('No summaries found in database');\n}\n\n// Store the summaries in workflow static data for later use\nconst staticData = $getWorkflowStaticData('global');\nstaticData.weekSummaries = weekSummaries.map(item => item.json);\nstaticData.summaryCount = weekSummaries.length;\n\n// Prepare data for executive summary generation\nconst summariesText = weekSummaries.map(item => \n  `${item.json.Company}:\\n${item.json.Summary}`\n).join('\\n\\n---\\n\\n');\n\nconst companiesList = weekSummaries.map(item => item.json.Company).join(', ');\nconst currentWeek = DateTime.local().toFormat('kkkk-WW');\n\nreturn [{\n  json: {\n    weekSummaries: weekSummaries.map(item => item.json),\n    summariesText: summariesText,\n    companiesList: companiesList,\n    currentWeek: currentWeek,\n    summaryCount: weekSummaries.length\n  }\n}];"
      },
      "id": "filter-current-week",
      "name": "Process Summaries",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        360,
        600
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Based on the following company news summaries from this week, create a professional executive summary highlighting the most significant developments across all companies.\n\nCompanies covered: {{ $json.companiesList }}\n\nIndividual Summaries:\n{{ $json.summariesText }}",
        "options": {
          "systemMessage": "You are an expert business analyst creating executive summaries for C-suite executives. \n\nYOUR OUTPUT MUST USE THIS EXACT FORMAT:\n\n**Market Overview:**\n• Key trend 1 affecting multiple companies\n• Key trend 2 with specific impact\n• Overall market sentiment/direction\n\n**Notable Developments:**\n• [Company] - Specific achievement/news with metric\n• [Company] - Major announcement with outcome\n• [Company] - Strategic move with implications\n\n**Financial Highlights:**\n• Biggest gain: [Company] - specific percentage/amount\n• Major investment: [Company] - dollar amount and purpose\n• Revenue milestone: [Company] - specific achievement\n\n**Strategic Implications:**\n• Industry shift toward [specific trend]\n• Competitive positioning changes\n• Future outlook based on current developments\n\nRULES:\n1. Use bullet points (•) for all items\n2. Keep each bullet to ONE clear point\n3. Include specific numbers, percentages, and dates\n4. Focus on cross-company patterns and trends\n5. NO long sentences - be concise and factual\n6. Group related items under the section headers",
          "maxIterations": 5
        }
      },
      "id": "executive-summary-agent",
      "name": "Executive Summary Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        580,
        600
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list"
        },
        "options": {
          "maxTokens": 1000,
          "temperature": 0.3
        }
      },
      "id": "summary-llm",
      "name": "Summary LLM",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        520,
        820
      ],
      "credentials": {
        "openAiApi": {
          "id": "PS440yU5f7mAuNzs",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the executive summary from AI Agent\nconst executiveSummary = $input.item.json.output || '';\n\n// Retrieve the week summaries from workflow static data\nconst staticData = $getWorkflowStaticData('global');\nconst weekSummaries = staticData.weekSummaries || [];\nconst currentWeek = DateTime.local().toFormat('kkkk-WW');\n\n// Get the spreadsheet info from the Create Research Database node\nconst spreadsheetId = $('Create Research Database').first().json.spreadsheetId;\nconst spreadsheetUrl = $('Create Research Database').first().json.spreadsheetUrl;\n\nreturn [{\n  json: {\n    spreadsheetId: spreadsheetId,\n    spreadsheetUrl: spreadsheetUrl,\n    executiveSummary: executiveSummary,\n    weekSummaries: weekSummaries,\n    currentWeek: currentWeek\n  }\n}];"
      },
      "id": "combine-data",
      "name": "Combine Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "// Store the spreadsheet info and prepare headers\nconst spreadsheetUrl = $input.item.json.spreadsheetUrl;\nconst spreadsheetId = $input.item.json.spreadsheetId;\nconst executiveSummary = $input.item.json.executiveSummary || '';\nconst weekSummaries = $input.item.json.weekSummaries || [];\n\n// Check if we have summaries\nif (!Array.isArray(weekSummaries) || weekSummaries.length === 0) {\n  console.error('weekSummaries:', weekSummaries);\n  console.error('Full input:', $input.item.json);\n  throw new Error('No week summaries found to format. Check Combine Data node.');\n}\n\n// Create header row\nconst headers = {\n  Company: 'Company',\n  'Key Developments': 'Key Developments',\n  Impact: 'Impact/Significance',\n  Links: 'Related Links',\n  'Research Date': 'Research Date'\n};\n\n// Format summaries for the sheet\nconst formattedSummaries = weekSummaries.map(summary => {\n  // Extract key points from the summary\n  const summaryText = summary.Summary || '';\n  let keyDevelopments = 'No summary available';\n  \n  // Try to extract the Key Developments section\n  const keyDevMatch = summaryText.match(/\\*\\*Key Developments:\\*\\*([\\s\\S]*?)(?:\\*\\*|$)/);\n  if (keyDevMatch && keyDevMatch[1]) {\n    // Extract just the bullet points, limit to first 2-3\n    const bullets = keyDevMatch[1].match(/•[^\\n]+/g);\n    if (bullets) {\n      keyDevelopments = bullets.slice(0, 3).join(' ');\n    }\n  } else {\n    // Fallback to first few sentences\n    const sentences = summaryText.split('. ').slice(0, 2).join('. ');\n    keyDevelopments = sentences || 'No developments this week';\n  }\n  \n  return {\n    Company: summary.Company || 'Unknown',\n    'Key Developments': keyDevelopments,\n    Impact: 'See detailed summary',\n    Links: summary.Links || 'No links available',\n    'Research Date': summary.ResearchDate ? new Date(summary.ResearchDate).toLocaleDateString() : 'N/A'\n  };\n});\n\n// Add headers as first item\nconst dataWithHeaders = [headers, ...formattedSummaries];\n\nreturn dataWithHeaders.map(row => ({\n  json: {\n    ...row,\n    spreadsheetUrl: spreadsheetUrl,\n    spreadsheetId: spreadsheetId,\n    executiveSummary: executiveSummary,\n    weekSummaries: weekSummaries\n  }\n}));"
      },
      "id": "format-sheet-data",
      "name": "Format Sheet Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        600
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $('Create Research Database').first().json.spreadsheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Weekly Summary",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": []
        },
        "options": {}
      },
      "id": "populate-weekly-sheet",
      "name": "Populate Weekly Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        1240,
        600
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "srnrFBhxce3hn8Co",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1LnQfeGcO80OMRpUJ0fmPaO6Fxeb45N58oh0Qlcz65j4",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Recipients",
          "mode": "name"
        },
        "options": {}
      },
      "id": "read-recipients",
      "name": "Read Email Recipients",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        1460,
        740
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "srnrFBhxce3hn8Co",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the last item which has all the data\nconst allItems = $input.all();\nconst lastItem = allItems[allItems.length - 1];\nconst spreadsheetUrl = lastItem.json.spreadsheetUrl || '';\nconst executiveSummary = lastItem.json.executiveSummary || '';\nconst weekSummaries = lastItem.json.weekSummaries || [];\nconst currentWeek = DateTime.local().toFormat('MMMM d, yyyy');\n\n// Get email recipients from the Read Email Recipients node\nconst recipientsData = $('Read Email Recipients').all();\nconst recipients = recipientsData\n  .map(item => item.json.email || item.json.Email)\n  .filter(email => email && email.trim() !== '')\n  .join(', ');\n\nif (!recipients) {\n  throw new Error('No email recipients found in Recipients sheet');\n}\n\n// Function to convert markdown to HTML with proper formatting\nfunction formatSummaryToHTML(summary) {\n  // Replace **text** with <strong>text</strong>\n  summary = summary.replace(/\\*\\*([^*]+)\\*\\*/g, '<strong>$1</strong>');\n  \n  // Replace bullet points with proper HTML list items\n  summary = summary.replace(/•\\s*([^\\n]+)/g, '<li>$1</li>');\n  \n  // Wrap consecutive list items in <ul> tags\n  summary = summary.replace(/(<li>.*<\\/li>\\s*)+/g, function(match) {\n    return '<ul style=\"margin: 10px 0; padding-left: 20px;\">' + match + '</ul>';\n  });\n  \n  // Replace line breaks with <br> for non-list content\n  summary = summary.replace(/\\n(?!<)/g, '<br>');\n  \n  return summary;\n}\n\n// Format executive summary\nconst formattedExecutiveSummary = formatSummaryToHTML(executiveSummary);\n\n// Create HTML email with professional formatting\nconst htmlContent = `\n<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n    h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }\n    h2 { color: #34495e; margin-top: 30px; }\n    h3 { color: #7f8c8d; margin-top: 20px; }\n    .executive-summary { background-color: #ecf0f1; padding: 20px; border-radius: 5px; margin-bottom: 30px; }\n    .executive-summary strong { color: #2c3e50; display: block; margin-top: 15px; margin-bottom: 5px; }\n    .executive-summary ul { margin: 10px 0; padding-left: 20px; }\n    .executive-summary li { margin: 5px 0; }\n    table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n    th { background-color: #3498db; color: white; padding: 12px; text-align: left; }\n    td { padding: 12px; border-bottom: 1px solid #ddd; }\n    tr:hover { background-color: #f5f5f5; }\n    .company-detail { margin: 30px 0; padding: 20px; border-left: 4px solid #3498db; background-color: #f8f9fa; }\n    .company-detail h3 { margin-top: 0; }\n    .company-detail strong { color: #2c3e50; display: block; margin-top: 10px; margin-bottom: 5px; }\n    .company-detail ul { margin: 10px 0; padding-left: 20px; }\n    .company-detail li { margin: 5px 0; }\n    .spreadsheet-link { background-color: #2ecc71; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0; }\n    .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; color: #7f8c8d; font-size: 14px; }\n  </style>\n</head>\n<body>\n  <h1>Weekly Company News Summary - Week of ${currentWeek}</h1>\n  \n  <div class=\"executive-summary\">\n    <h2>Executive Summary</h2>\n    ${formattedExecutiveSummary}\n  </div>\n  \n  <h2>Company News Overview</h2>\n  <table>\n    <thead>\n      <tr>\n        <th style=\"width: 25%;\">Company</th>\n        <th style=\"width: 50%;\">Key Developments</th>\n        <th style=\"width: 25%;\">Links</th>\n      </tr>\n    </thead>\n    <tbody>\n      ${weekSummaries.map(summary => {\n        // Extract first bullet point or overview for the table\n        let keyDev = 'No developments';\n        const overviewMatch = summary.Summary.match(/\\*\\*Overview:\\*\\*\\s*([^\\n]+)/);\n        if (overviewMatch) {\n          keyDev = overviewMatch[1];\n        } else {\n          const firstBullet = summary.Summary.match(/•\\s*([^\\n]+)/);\n          if (firstBullet) {\n            keyDev = firstBullet[1];\n          }\n        }\n        return `\n        <tr>\n          <td><strong>${summary.Company}</strong></td>\n          <td>${keyDev}</td>\n          <td>${summary.Links ? `<a href=\"${summary.Links.split('\\n')[0]}\">View Details</a>` : 'No links'}</td>\n        </tr>\n      `}).join('')}\n    </tbody>\n  </table>\n  \n  <a href=\"${spreadsheetUrl}\" class=\"spreadsheet-link\">View Full Report in Google Sheets</a>\n  \n  <h2>Detailed Company Reports</h2>\n  ${weekSummaries.map(summary => `\n    <div class=\"company-detail\">\n      <h3>${summary.Company}</h3>\n      ${formatSummaryToHTML(summary.Summary)}\n      ${summary.Links ? `<p style=\"margin-top: 15px;\"><strong>Related Links:</strong><br>${summary.Links.split('\\n').map(link => `<a href=\"${link}\">${link}</a>`).join('<br>')}</p>` : ''}\n      <p style=\"margin-top: 10px; font-style: italic; color: #666;\">Research Date: ${new Date(summary.ResearchDate).toLocaleDateString()}</p>\n    </div>\n  `).join('')}\n  \n  <div class=\"footer\">\n    <p>This newsletter was automatically generated based on news from the past 7 days.</p>\n    <p>For questions or to update the company list, please contact your administrator.</p>\n  </div>\n</body>\n</html>\n`;\n\nreturn [{\n  json: {\n    to: recipients,\n    subject: `Weekly Company Newsletter - ${currentWeek}`,\n    htmlContent: htmlContent,\n    spreadsheetUrl: spreadsheetUrl,\n    weekSummaries: weekSummaries,\n    recipientCount: recipients.split(',').length\n  }\n}];"
      },
      "id": "format-email",
      "name": "Format Email",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        600
      ]
    },
    {
      "parameters": {
        "sendTo": "={{ $json.to }}",
        "subject": "={{ $json.subject }}",
        "emailType": "html",
        "message": "={{ $json.htmlContent }}",
        "options": {
          "appendAttribution": false
        }
      },
      "id": "send-email",
      "name": "Send Newsletter Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1900,
        600
      ],
      "credentials": {
        "gmailOAuth2": {
          "id": "jdEXWlts2y8tDswV",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Workflow Features\n\n1. **Automatic Database Creation**:\n   - Creates new Research Database for each run\n   - Named with date and week number\n   - Contains both Research and Weekly Summary sheets\n\n2. **Dynamic Email Recipients**:\n   - Reads from Recipients sheet\n   - Supports multiple recipients\n   - No hardcoded emails\n\n3. **Bullet Point Formatting**:\n   - Executive summary with structured bullets\n   - Company research with clear bullet points\n   - Easy to scan and read\n\n4. **Archive System**:\n   - Each run creates a separate database\n   - Easy to review historical newsletters\n   - Clean separation by week",
        "height": 380.39215686274506,
        "width": 323.52941176470575
      },
      "id": "setup-note",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2220,
        400
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Create Research Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Research Database": {
      "main": [
        [
          {
            "node": "Prepare Headers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Headers": {
      "main": [
        [
          {
            "node": "Setup Research Headers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Research Headers": {
      "main": [
        [
          {
            "node": "Read Company List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Company List": {
      "main": [
        [
          {
            "node": "Prepare Companies for Research",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Companies for Research": {
      "main": [
        [
          {
            "node": "Store Company Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Company Data": {
      "main": [
        [
          {
            "node": "Company Research Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Company Research Agent": {
      "main": [
        [
          {
            "node": "Format Research Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research LLM": {
      "ai_languageModel": [
        [
          {
            "node": "Company Research Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity Research Tool": {
      "ai_tool": [
        [
          {
            "node": "Company Research Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Format Research Data": {
      "main": [
        [
          {
            "node": "Store in Research Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store in Research Database": {
      "main": [
        [
          {
            "node": "Check Research Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Research Completion": {
      "main": [
        [
          {
            "node": "Read Current Week Summaries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Current Week Summaries": {
      "main": [
        [
          {
            "node": "Process Summaries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Summaries": {
      "main": [
        [
          {
            "node": "Executive Summary Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Executive Summary Agent": {
      "main": [
        [
          {
            "node": "Combine Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summary LLM": {
      "ai_languageModel": [
        [
          {
            "node": "Executive Summary Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Combine Data": {
      "main": [
        [
          {
            "node": "Format Sheet Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Sheet Data": {
      "main": [
        [
          {
            "node": "Populate Weekly Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Populate Weekly Sheet": {
      "main": [
        [
          {
            "node": "Read Email Recipients",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Email Recipients": {
      "main": [
        [
          {
            "node": "Format Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Email": {
      "main": [
        [
          {
            "node": "Send Newsletter Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "v7.3.1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "enhanced-newsletter-workflow-v7.3.1"
  },
  "id": "company-news-enhanced-v7.3.1",
  "tags": []
}